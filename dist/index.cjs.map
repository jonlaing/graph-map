{"version":3,"sources":["../src/index.ts","../src/PropSet.ts","../src/PropValueMap.ts","../src/Value.ts","../src/GraphMap.ts"],"sourcesContent":["import GraphMap from \"./GraphMap\";\n\nexport default GraphMap;\n","import Value from \"./Value\";\n\nexport default class PropSet<T extends object> {\n  private data: Set<Value<T>> = new Set();\n\n  get size() {\n    return this.data.size;\n  }\n\n  first(): Value<T> | undefined {\n    for (const val of this.data) {\n      return val;\n    }\n  }\n\n  add(val: Value<T>) {\n    this.data.add(val);\n  }\n\n  remove(val: Value<T>, markRemoved = true) {\n    this.data.delete(val) && markRemoved && val.markRemoved();\n  }\n\n  clear() {\n    for (const val of this.values) {\n      this.remove(val);\n    }\n  }\n\n  get values() {\n    return this.data;\n  }\n\n  toArray(): T[] {\n    const arr: T[] = [];\n    for (const val of this.values) {\n      arr.push(val.value);\n    }\n    return arr;\n  }\n}\n","import PropSet from \"./PropSet\";\nimport Value from \"./Value\";\n\nexport default class PropValueMap<T extends object> {\n  key: keyof T;\n  private props: Map<T[keyof T], PropSet<T>> = new Map();\n\n  constructor(key: keyof T) {\n    this.key = key;\n  }\n\n  has(propVal: T[keyof T]): boolean {\n    return this.props.has(propVal);\n  }\n\n  getAll(propVal: T[keyof T]): PropSet<T> | undefined {\n    return this.props.get(propVal);\n  }\n\n  getFirst(propVal: T[keyof T]): Value<T> | undefined {\n    return this.getAll(propVal)?.first();\n  }\n\n  getFirstValue(propVal: T[keyof T]): T | undefined {\n    return this.getFirst(propVal)?.value;\n  }\n\n  add(val: Value<T>) {\n    const propVal = val.value[this.key];\n    if (this.props.has(propVal)) {\n      this.props.get(propVal)?.add(val);\n    } else {\n      const props = new PropSet<T>();\n      props.add(val);\n      this.props.set(propVal, props);\n    }\n  }\n\n  remove(propVal: T[keyof T]) {\n    this.props.get(propVal)?.clear();\n    this.props.delete(propVal);\n  }\n\n  removeValue(val: Value<T>, prop?: T[keyof T], markRemoved = true) {\n    const propVal = prop ?? val.value[this.key];\n\n    this.props.get(propVal)?.remove(val, markRemoved);\n\n    if (this.props.get(propVal)?.size === 0) {\n      this.props.delete(propVal);\n    }\n  }\n\n  entries() {\n    return this.props.entries();\n  }\n\n  toRecord(): Record<string, T[]> {\n    const obj: Record<string, T[]> = {};\n\n    for (const [key, val] of this.props) {\n      obj[`${key}`] = val.toArray();\n    }\n\n    return obj;\n  }\n}\n","type CallbackSet<T> = Set<(val: T) => void>;\n\nexport default class Value<T extends object> {\n  value: T;\n  private listeners: Map<keyof T, CallbackSet<T>> = new Map();\n\n  constructor(val: T) {\n    this.value = val;\n  }\n\n  private onChange(key: keyof T) {\n    if (this.listeners.has(key)) {\n      for (const callback of this.listeners.get(key) as CallbackSet<T>) {\n        callback(this.value);\n      }\n    }\n  }\n\n  addKeyListener(key: keyof T, callback: (val: T) => void): () => void {\n    if (this.listeners.has(key)) {\n      this.listeners.get(key)?.add(callback);\n    } else {\n      this.listeners.set(key, new Set([callback]));\n    }\n\n    return () => this.listeners.get(key)?.delete(callback);\n  }\n\n  update(f: (val: T) => NonNullable<T>): void {\n    const newVal = f({ ...this.value }) as T;\n    for (const k in newVal) {\n      if (this.value[k] !== newVal[k]) {\n        this.value[k] = newVal[k];\n        this.onChange(k);\n      }\n    }\n  }\n\n  set(val: NonNullable<T>): void {\n    this.update(() => val);\n  }\n\n  clone(): T {\n    return { ...this.value };\n  }\n\n  markRemoved() {\n    for (const set of this.listeners.values()) {\n      for (const cb of set) {\n        cb({} as T);\n      }\n    }\n  }\n}\n","import PropSet from \"./PropSet\";\nimport PropValueMap from \"./PropValueMap\";\nimport Value from \"./Value\";\n\nexport default class GraphMap<T extends object> {\n  private data: Map<keyof T, PropValueMap<T>> = new Map();\n\n  constructor(indices: (keyof T)[], values: T[]) {\n    indices.forEach((key) => this.data.set(key, new PropValueMap<T>(key)));\n    this.concat(values);\n  }\n\n  keys() {\n    return this.data.keys();\n  }\n\n  hasKey(key: keyof T): boolean {\n    return this.data.has(key);\n  }\n\n  concat(vals: T[]): void {\n    vals.forEach((val) => {\n      const nodeValue = new Value({ ...val });\n\n      for (const [key, nodeKey] of this.data.entries()) {\n        nodeValue.addKeyListener(key, (newVal) => {\n          if (!newVal[key]) {\n            this.data.get(key)?.removeValue(nodeValue, val[key], false);\n            return;\n          }\n\n          if (newVal[key] !== val[key]) {\n            this.data.get(key)?.removeValue(nodeValue, val[key], false);\n            this.data.get(key)?.add(nodeValue);\n          }\n        });\n\n        nodeKey.add(nodeValue);\n      }\n    });\n  }\n\n  append(val: T): void {\n    this.concat([val]);\n  }\n\n  getByPropValue(key: keyof T, value: T[keyof T]): PropSet<T> | undefined {\n    return this.data.get(key)?.getAll(value);\n  }\n\n  groupBy(key: keyof T): PropValueMap<T> | undefined {\n    return this.data.get(key);\n  }\n\n  update(key: keyof T, value: T[keyof T], f: (val: T) => NonNullable<T>): void {\n    const set = this.data.get(key)?.getAll(value)?.values;\n\n    if (!set) return;\n\n    for (const node of set) {\n      node.update(f);\n    }\n  }\n\n  updateMany(\n    key: keyof T,\n    values: T[keyof T][],\n    f: (val: T) => NonNullable<T>\n  ): void {\n    if (!this.data.has(key)) return;\n\n    const map = this.data.get(key) as PropValueMap<T>;\n\n    for (const [val, set] of map.entries()) {\n      if (values.includes(val)) {\n        for (const node of set.values) {\n          node.update(f);\n        }\n      }\n    }\n  }\n\n  set(key: keyof T, value: T[keyof T], val: T): void {\n    this.update(key, value, () => val as NonNullable<T>);\n  }\n\n  remove(key: keyof T, value: T[keyof T]): void {\n    this.data.get(key)?.remove(value);\n  }\n\n  toRecord(): Record<string, Record<string, T[]>> {\n    const obj: Record<string, Record<string, T[]>> = {};\n    for (const [key, val] of this.data) {\n      obj[String(key)] = val.toRecord();\n    }\n    return obj;\n  }\n}\n"],"mappings":"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","names":["_a"]}